#include<iostream>
#include<string>
using namespace std;

#define Max 1000 


struct Contacts
{
    string cName;       
    int cGender = 1;    
    int cAge = 0;       
    string cPhone;      
    string cAdd;        
};

struct AddressBooks
{
    Contacts contactsArry[Max]; 
    int aCount = 0;             
};


void showMenu()
{
    cout << "********************************" << endl;
    cout << "***** Contact Management System *****" << endl;
    cout << "********************************" << endl;
    cout << "*****    1. Add Contact        *****" << endl;
    cout << "*****    2. Display Contacts   *****" << endl;
    cout << "*****    3. Delete Contact     *****" << endl;
    cout << "*****    4. Search Contact     *****" << endl;
    cout << "*****    5. Edit Contact       *****" << endl;
    cout << "*****    6. Clear Contacts     *****" << endl;
    cout << "*****    0. Exit               *****" << endl;
    cout << "********************************" << endl;
    cout << "*********** Version 1.0 ***********" << endl;
    cout << "********************************" << endl;
}


void AddContacts(AddressBooks* abs)
{
    
    if (abs->aCount == Max)
    {
        cout << "Address book is full, cannot add more contacts." << endl;
        return;
    }
    else
    {
        
        string name;
        cout << "Enter name: " << endl;
        cin >> name;
        abs->contactsArry[abs->aCount].cName = name;


        int gender;
        cout << "Enter gender (1 for Male, 2 for Female): " << endl;

        while (true)
        {
            cin >> gender;
            if (gender == 1 || gender == 2)
            {
                abs->contactsArry[abs->aCount].cGender = gender;
                break;
            }
            cout << "Invalid input, please enter 1 or 2!" << endl;
        }

        
        int age;
        cout << "Enter age: " << endl;
        cin >> age;
        abs->contactsArry[abs->aCount].cAge = age;

        
        string phone;
        cout << "Enter phone number: " << endl;
        cin >> phone;
        abs->contactsArry[abs->aCount].cPhone = phone;

        
        string add;
        cout << "Enter address: " << endl;
        cin >> add;
        abs->contactsArry[abs->aCount].cAdd = add;

        abs->aCount += 1;
        cout << "Contact added successfully!" << endl;
        system("pause");
        system("cls");
    }
}

void ShowContacts(AddressBooks* abs)
{
    if (abs->aCount == 0)
    {
        cout << "No contacts available, please add a contact first!" << endl;
    }
    else
    {
        for (int i = 0; i < abs->aCount; i++)
        {
            cout << "Name: " << abs->contactsArry[i].cName
                 << ", Gender: " << (abs->contactsArry[i].cGender == 1 ? "Male" : "Female")
                 << ", Age: " << abs->contactsArry[i].cAge
                 << ", Phone: " << abs->contactsArry[i].cPhone
                 << ", Address: " << abs->contactsArry[i].cAdd << endl;
        }
    }
    system("pause");
    system("cls");
}

int IsExit(AddressBooks* abs, string name)
{
    for (int i = 0; i < abs->aCount; i++)
    {
        if (abs->contactsArry[i].cName == name)
        {
            return i;
        }
    }
    return -1;
}


void DeleteContacts(AddressBooks* abs)
{
    string name;
    cout << "Enter the name of the contact to delete: " << endl;
    cin >> name;
    int index = IsExit(abs, name);
    if (index != -1)
    {
        for (int i = index; i < abs->aCount - 1; i++)
        {
            abs->contactsArry[i] = abs->contactsArry[i + 1];
        }
        abs->aCount--;
        cout << "Contact deleted successfully!" << endl;
    }
    else
    {
        cout << "Contact not found!" << endl;
    }
    system("pause");
    system("cls");
}


void GetContacts(AddressBooks* abs)
{
    string name;
    cout << "Enter the name of the contact to search: " << endl;
    cin >> name;
    int index = IsExit(abs, name);
    if (index != -1)
    {
        cout << "Name: " << abs->contactsArry[index].cName
             << ", Gender: " << (abs->contactsArry[index].cGender == 1 ? "Male" : "Female")
             << ", Age: " << abs->contactsArry[index].cAge
             << ", Phone: " << abs->contactsArry[index].cPhone
             << ", Address: " << abs->contactsArry[index].cAdd << endl;
    }
    else
    {
        cout << "Contact not found!" << endl;
    }
    system("pause");
    system("cls");
}


void ModefyContacts(AddressBooks* abs)
{
    string name;
    cout << "Enter the name of the contact to modify: " << endl;
    cin >> name;
    int index = IsExit(abs, name);
    if (index != -1)
    {
        
        cout << "Enter new name: " << endl;
        cin >> abs->contactsArry[index].cName;

        
        int gender;
        cout << "Enter new gender (1 for Male, 2 for Female): " << endl;

        while (true)
        {
            cin >> gender;
            if (gender == 1 || gender == 2)
            {
                abs->contactsArry[index].cGender = gender;
                break;
            }
            cout << "Invalid input, please enter 1 or 2!" << endl;
        }

        
        cout << "Enter new age: " << endl;
        cin >> abs->contactsArry[index].cAge;

        
        cout << "Enter new phone number: " << endl;
        cin >> abs->contactsArry[index].cPhone;

        
        cout << "Enter new address: " << endl;
        cin >> abs->contactsArry[index].cAdd;
        cout << "Contact modified successfully!" << endl;
    }
    else
    {
        cout << "Contact not found!" << endl;
    }
    system("pause");
    system("cls");
}


void ClearContacts(AddressBooks* abs)
{
    string choose;
    cout << "Are you sure you want to clear all contacts? (Y to confirm / N to cancel): " << endl;

    while (true)
    {
        cin >> choose;
        if (choose == "Y" || choose == "N")
        {
            break;
        }
        else
        {
            cout << "Invalid input, please enter Y or N!" << endl;
        }
    }

    if (choose == "Y")
    {
        abs->aCount = 0;
        cout << "All contacts cleared successfully!" << endl;
    }
    else
    {
        cout << "Operation cancelled!" << endl;
    }
    system("pause");
    system("cls");
}


int main()
{
    int select = 0;
    AddressBooks abs;

    while (true)
    {
        showMenu();

        cin >> select;
        switch (select)
        {
        case 1:
            AddContacts(&abs);
            break;
        case 2:
            ShowContacts(&abs);
            break;
        case 3:
            DeleteContacts(&abs);
            break;
        case 4:
            GetContacts(&abs);
            break;
        case 5:
            ModefyContacts(&abs);
            break;
        case 6:
            ClearContacts(&abs);
            break;
        case 0:
            cout << "Thank you for using, goodbye!" << endl;
            system("pause");
            return 0;
        default:
            cout << "Invalid selection, please try again." << endl;
            break;
        }
    }

    return 0;
}


